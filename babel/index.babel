var App = React.createClass({
  getInitialState: function() {
    return {
      accounts: [
        'freecodecamp',
        'storbeck',
        'terakilobyte',
        'habathcx',
        'RobotCaleb',
        'thomasballinger',
        'noobs2ninjas',
        'beohoff',
        'MedryBW',
        'brunofin',
        'comster404',
        'quill18',
        'rafase282',
        'darkness_429',
        'kairi78_officiel',
        'rafase282s'
      ],
      logoURL: 'https://s-media-cache-ak0.pinimg.com/236x/1b/d0/eb/1bd0eb3468a132c2f8d02a56435ebd1e.jpg',
      user: '',
      users: '',
      channel: '',
      search: '',
      streams: '',
      ingests: '',
      teams: '',
      accInfo: {}
    }
  },
  componentWillMount: function() {
    let accList = JSON.parse(localStorage.getItem('Rafase282_TwitchApp'));
    if (accList) {
      this.setState({accounts: accList})
    }
  },
  componentDidUpdate: function(prevProps, prevState) {
    localStorage.setItem('Rafase282_TwitchApp', JSON.stringify(this.state.accounts));
  },
  getUserInfo(currUser){
    return axios.get(this.state.users + currUser).catch(function (error) {
    if (error.response) {
      return error.response;
    }
  });

  },
  getStreamInfo(currStream){
    return axios.get(this.state.streams + currStream).catch(function (error) {
    if (error.response) {
      return error.response;
    }
  });
  },
  getFullInfo(userInfo, feed, username){
    userInfo = userInfo.data;
    feed = feed.data;
    let userObj = this.state.accInfo;
    let logo = this.state.logoURL;
    let Account = this.makeAccountObj;
    let user = username;
    function checkStatus(){
      switch (feed.status) {
          case 404:
            user.status = feed.message;
            user.name = username;
            setOffline(feed.message);
            break;      
          case 422:
            user.status = 'Account Closed!';
            setOffline(feed.message);
            break;
          default:
            user.status = 'Offline!';
            setOffline('Only Available when online.');
      
  }
    };
    function setOffline(msg) {
            user.viewers = msg;
            user.game = msg;
            user.followers = msg;
            user.fps = msg;
          };
    user = new Account(userInfo.display_name, userInfo.logo? userInfo.logo: logo, userInfo.bio? userInfo.bio: 'No Bio available.');
    checkStatus();
    if (feed.stream) {
            user.status = feed.stream.channel.status;
            user.url = feed.stream.channel.url;
            user.viewers = numeral(feed.stream.viewers).format('0,0');
            user.game = feed.stream.game;
            user.preview = feed.stream.preview.large;
            user.followers = numeral(feed.stream.channel.followers).format('0,0');
            user.fps = numeral(feed.stream.average_fps).format('0.00');
   };
    userObj[userInfo.name] = user;
    this.setState({
      accInfo: userObj
    })
  },
  componentDidMount: function() {
    this.serverRequest = $.get('https://api.twitch.tv/kraken/', (res) => {
      this.setState({
              user: res._links.user+ '/',
              users: res._links.user + 's/',
              channel: res._links.channel + '/',
              search: res._links.search+ '/',
              streams: res._links.streams + '/',
              ingests: res._links.ingest+ '/',
              teams: res._links.teams+ '/',
            });
      let accounts = this.state.accounts;
      let getUserInfo = this.getUserInfo;
      let getStreamInfo = this.getStreamInfo;
      let getFullInfo = this.getFullInfo;
      accounts.forEach(function (user){
        axios.all([getUserInfo(user), getStreamInfo(user), user]).then(axios.spread(getFullInfo))
      })
    });
  },
  componentWillUnmount: function() {
    this.serverRequest.abort();
  },
  makeAccountObj: function Account(name, logo, bio, status, url, viewers, game, preview, followers, fps) {
    this.name = name;
    this.logo = logo;
    this.bio = bio;
    this.status = status;
    this.url = url;
    this.viewers = viewers;
    this.game = game;
    this.preview = preview;
    this.followers = followers;
    this.fps = fps;
  },
  setFiltered(filtered) {
    this.setState({
      accounts: fitered
    })
  },
  obj2arr(){
    let users = this.state.accInfo;
    let userArr = [];
    for (let key in users) {
      let user = users[key];
      userArr.push(user)
    }
    return userArr;
  },
  render() {
    let accounts = this.state.accounts;
    let userArr = this.obj2arr();
    let userCards = userArr.map(function(accountData) {
      return <UserCard users={accountData}/>;
    });
    return <section className='container-fluid'>
      <Header/>
      <main className='page-content container'>
        <div className='row'>
          <div className='col s12'>
            <div className='card-panel color-Bp-light'>
              <SearchBar  setFilter={this.state.setFiltered} accounts={accounts}/>
              <ul className='collection collapsible popout' data-collapsible='accordion'>
                {userCards}
              </ul>
            </div>
          </div>
        </div>
        <Menu/>
      </main>
      <Footer/>
    </section>;
  }
});
var UserCard = React.createClass({
  showLink: function showLink() {
    let url = this.props.users.url;
    if (url) {
      return (
        <a href={url} target='_blank' className='secondary-content'>
          <i className='material-icons'>web</i>
        </a>
      )
    }
  },
  showBio: function showBio() {
    let bio = this.props.users.bio;
    return (bio !== null)? bio : 'No Bio available.';
  },
  render() {
    
    let userObj = this.props.users;
    let classes = 'collection-item avatar color-Bsd color-Tp ' + userObj.name.toLowerCase();
    return (
      <li className={classes}>
        <div className='collapsible-header'>
          <span className='title'>
            <img src={userObj.logo} alt={userObj.user} className='circle'/> {userObj.name}
            <p>
              <strong>Title: </strong>
              {userObj.status}
            </p>
          </span>
        </div>
        <div className='collapsible-body'>
          <p>
            <strong>Bio: </strong>
            {userObj.bio}<br/>
            <strong>Playing: </strong>
            {userObj.game}<br/>
            <strong>Current Views: </strong>
            {userObj.viewers}<br/>
            <strong>Followers: </strong>
            {userObj.followers}<br/>
            <strong>Stream Average FPS: </strong>
            {userObj.fps}
          </p>
          <img src={userObj.preview} alt={userObj.user} className='responsive-img'/>
        </div>
        {this.showLink()}
      </li>
    )
  }
});
var Menu = React.createClass({
  render: function() {
    return (

      <div className='fixed-action-btn horizontal click-to-toggle' style={{
        bottom: 45,
        right: 24
      }}>
        <a className='btn-floating btn-large red'>
          <i className='material-icons'>menu</i>
        </a>
        <ul>
          <li>
            <a className='btn-floating red'>
              <i className='material-icons'>insert_chart</i>
            </a>
          </li>
          <li>
            <a className='btn-floating yellow darken-1'>
              <i className='material-icons'>format_quote</i>
            </a>
          </li>
          <li>
            <a className='btn-floating green'>
              <i className='material-icons'>publish</i>
            </a>
          </li>
          <li>
            <a className='btn-floating blue'>
              <i className='material-icons'>attach_file</i>
            </a>
          </li>
        </ul>
      </div>
    );
  }
});
var SearchBar = React.createClass({
  search: function search() {
    if ($('#search').val().length > 0) {
      $('.collection-item').css('display', 'none');
      this.getFiltered();
    } else {
      $('.collection-item').css('display', 'block');
    }
    $('#search').unbind('keyup');
    $('#search').keyup(this.search);
  },
  displayResults: function displayResults() {
    var reg = new RegExp($('#search').val(), 'ig');
    let accounts = this.props.accounts;
    for (let key in users){
      let name = users[key];
      if (reg.test(name)) {
        console.log(reg, name, reg.test(name), '.' + name)
        $('.' + name).css('display', 'block');
      }
    };
  },
  getFiltered() {
    var reg = new RegExp($('#search').val(), 'ig');
    let names = this.props.accounts;
    let filtered = names.filter((user) => reg.test(user));
    this.props.setFilter(filtered)
    
   },
  componentDidMount: function() {
    //$('#search').keyup(this.search);
  },
  render() {
    return (
      <div className='row'>
        <form className='col s12' action='action'>
          <div className='input-field col s12'>
            <i className='material-icons prefix color-Ts'>search</i>
            <input onChange={this.getFiltered} className='color-Ts' id='search' type='text' name='search' placeholder='Search for an account ...'/>
          </div>
        </form>
      </div>
    );
  }
});
var Header = React.createClass({
  render() {
    return <header className='page-header center-align'>
      <nav>
        <div className='nav-wrapper color-Bp'>
          <a className='brand-logo center color-Ts'>Twitch Status</a>
        </div>
      </nav>
    </header>
  }
});
var Footer = React.createClass({
  render: function() {
    return <footer className='page-footer center-align color-Bp'>
      <FooterInfo/>
      <FooterCopyright/>
    </footer>
  }
});
var FooterCopyright = React.createClass({
  render: function() {
    return <div className='footer-copyright'>
      <div className='container center-align'>
        Copyright &copy; &nbsp;
        <a className='color-Ts' href='http://rafase282.github.io/'>Rafael J. Rodriguez</a>
        &nbsp; 2016. All Rights Reserved
      </div>
    </div>
  }
});
var FooterInfoButtons = React.createClass({
  render: function() {
    return (
      <div className='col l4 offset-l2 s12'>
        <h5 className='color-Ts'>Follow Me!</h5>
        <div className='col s6'>
          <ul>
            <li>
              <a href='https://github.com/Rafase282' target='_blank'>
                <span data-position='left' data-tooltip='GitHub' className='devicons devicons-github_badge color-Ts tooltipped'/>
              </a>
            </li>
            <li>
              <a href='https://www.linkedin.com/in/rafase282' target='_blank'>
                <i data-position='left' data-tooltip='LinkedIn' className='mdi mdi-linkedin-box small color-Ts tooltipped'/>
              </a>
            </li>
            <li>
              <a href='http://codepen.io/Rafase282' target='_blank'>
                <span data-position='left' data-tooltip='Codepen' className='devicons devicons-codepen color-Ts tooltipped'/>
              </a>
            </li>
            <li>
              <a href='https://www.youtube.com/c/rafaelrodriguez282' target='_blank'>
                <i data-position='left' data-tooltip='YouTube' className='mdi mdi-youtube-play small color-Ts tooltipped'></i>
              </a>
            </li>
          </ul>
        </div>
        <div className='col s6'>
          <ul>
            <li>
              <a href='https://medium.com/@Rafase282' target='_blank'><i data-position='left' data-tooltip='Medium' className='mdi mdi-medium small color-Ts tooltipped'/></a>
            </li>
            <li>
              <a href='https://twitter.com/Rafase282' target='_blank'><i data-position='left' data-tooltip='Twitter' className='mdi mdi-twitter small color-Ts tooltipped'/></a>
            </li>
            <li>
              <a href='http://www.freecodecamp.com/rafase282' target='_blank' style={{
                fontSize: '2em'
              }} className='color-Ts'>(<i data-position='left' data-tooltip='Free Code Camp' className='fa fa-fire fa-fw tooltipped'/>)</a>
            </li>
            <li>
              <a href='https://www.twitch.tv/rafase282' target='_blank'><i data-position='left' data-tooltip='Twitch' className='mdi mdi-twitch small color-Ts tooltipped'/></a>
            </li>
          </ul>
        </div>
      </div>
    )
  }
})
var FooterInfo = React.createClass({
  render: function() {
    return (
      <div className='container'>
        <div className='row'>
          <div className='col l6 s12'>
            <h5 className='color-Ts'>About the app</h5>
            <p className='color-Ts-light'>The purpose of the app is to track your favorite streamers so you can see when they are online along with some basic statistics like the number of current views, followers, link to channels and preview of the current stream.
              <br/>
              If the user if offline or the account has been closed, it will let you know. You are able to add and remove accounts to keep track of.</p>

          </div>
          <FooterInfoButtons/>
        </div>
      </div>
    );
  }
});
ReactDOM.render(
  <App/>, document.getElementById('content'));
