class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
			streamers: this.getStreamers(),
      defaultLogo: 'https://s-media-cache-ak0.pinimg.com/236x/1b/d0/eb/1bd0eb3468a132c2f8d02a56435ebd1e.jpg',
      filteredStreamersPayloads: [],
			allStreamersPayloads: []
		}
  }
  componentWillMount() {
    let accList = JSON.parse(localStorage.getItem('Rafase282_TwitchApp'));
    if (accList) {
      this.setState({streamers: accList})
    }
  }
  componentDidMount() {
    let streamers = this.state.streamers;
    let logo = this.state.defaultLogo;
    let update = this;
		streamers.forEach((streamer) => {
			this.getStreamerFullData(streamer);
		});
    // Modal settings for bringing up edit section
    $('.modal-trigger').leanModal({
      dismissible: false, // Modal can be dismissed by clicking outside of the modal
      opacity: .5, // Opacity of modal background
      in_duration: 300, // Transition in duration
      out_duration: 200, // Transition out duration
      starting_top: '5%', // Starting top style attribute
      ending_top: '10%', // Ending top style attribute
      //complete: ()=> {} // Callback for Modal close
    });
    
    // Section about the chips
    $('.chips').on('chip.add', function(e, chip){
      streamers.push(chip.tag);
      update.setState({streamers: streamers});
    });
    
    $('.chips').on('chip.delete', function(e, chip){
    // you have the deleted chip here
      streamers.splice(chip.id, 1);
      update.setState({streamers: streamers});
    });
    
    $('.chips-initial').material_chip({
      data: streamers.map((streamer, index) => {
        return {
          tag: streamer,
          image: logo,
          id: index
        };
      })
    });
	}
  componentDidUpdate(prevProps, nextProps) {
    localStorage.setItem('Rafase282_TwitchApp', JSON.stringify(this.state.streamers));
  }
  getStreamers() {
    return [
        'freecodecamp',
        'storbeck',
        'terakilobyte',
        'habathcx',
        'RobotCaleb',
        'thomasballinger',
        'noobs2ninjas',
        'beohoff',
        'MedryBW',
        'brunofin',
        'comster404',
        'quill18',
        'rafase282',
        'darkness_429',
        'kairi78_officiel',
        'rafase282s',
        'esl_sc2'
      ]
  }
  clearLocalStorage(props) {
    localStorage.removeItem('Rafase282_TwitchApp');
    this.setState({streamers: this.getStreamers()});
  }
  getUserData(streamer){
    return axios.get('https://api.twitch.tv/kraken/users/' + streamer)
      .catch(function (error) {
    if (error.response) {
      return error.response;
    }
  });

  }
  getStreamData(streamer){
    return axios.get('https://api.twitch.tv/kraken/streams/' + streamer)
      .catch(function (error) {
    if (error.response) {
      return error.response;
    }
  });
  }
  constructPayloadForStreamer(data){
    const {streamData, userData} = data;
    let user, logo, bio, status, url, viewers, game, preview, followers, fps;
    function setOffline(msg) {
      viewers = msg;
      game = msg;
      followers = msg;
      fps = msg;
    };
    user = userData.display_name || streamData.message.split("'")[1];
    logo = userData.logo ? userData.logo: this.state.defaultLogo;
    bio = userData.bio ? userData.bio: 'No Bio available.';
    
    if (streamData.stream == null){
      status = 'Offline!';
      setOffline('Only Available when online.');
    };
    
    if (streamData.status == 404){
      status = streamData.message;
      setOffline(streamData.message)
    };
    if (streamData.status == 422){
      status = 'Account Closed!';
      setOffline(streamData.message);
    };
    
    if(streamData.stream){
      status = streamData.stream.channel.status;
      url = streamData.stream.channel.url;
      viewers = numeral(streamData.stream.viewers).format('0,0');
      game = streamData.stream.game;
      preview = streamData.stream.preview.large;
      followers = numeral(streamData.stream.channel.followers).format('0,0');
      fps = numeral(streamData.stream.average_fps).format('0.00');
    };
    
    
    return {
      user, logo, bio, status, url, viewers, game, preview, followers, fps
    }
  }
  getStreamerFullData(streamer) {
		return axios.all([this.getStreamData(streamer), this.getUserData(streamer)])
			.then(axios.spread((stream, user) => {
				return {
          streamData: stream.data,
          userData: user.data
        }
			}))
			.then((data) => this.constructPayloadForStreamer(data))
			.then((payload) => {
				this.state.allStreamersPayloads.push(payload);
				this.state.filteredStreamersPayloads.push(payload);
				this.forceUpdate();
		  })
	}
  filterStreamers(event) {
		const updated = this.state.streamers
        .map((item) => item.toLowerCase())
        .filter((item) => {
        return item.search(event.target.value.toLowerCase()) !== -1;
      });
		
		const updatedPayloadsList = this.state.allStreamersPayloads.filter((payload) => {
			return updated.indexOf(payload.user.toLowerCase()) !== -1;
		});
		
		this.setState({
			filteredStreamersPayloads: updatedPayloadsList
		});
	}
  render() {
    return <section className='container-fluid'>
      <Header/>
      <main className='page-content container'>
        <div className='row'>
          <div className='col s12'>
            <div className='card-panel color-Bp-light'>
              <SearchBar filterStreamers={this.filterStreamers.bind(this)} />
              <FilteredList filteredStreamersPayloads={this.state.filteredStreamersPayloads} />
            </div>
          </div>
        </div>
        <Menu onClickReset={this.clearLocalStorage.bind(this)}/>
        <div id='editstreamers' className='modal bottom-sheet'>
          <div className='modal-content'>
            <h4>Edit Streamers List</h4>
            <p>Type an username to add a new streamer.</p>
            <div className='chips chips-initial' onChange={this.forceUpdate}>
              <input className='input' placeholder=''/>
            </div>
          </div>
          <div className='modal-footer'>
            <a className='modal-action modal-close waves-effect waves-green btn-flat'>Close</a>
          </div>
        </div>
      </main>
      <Footer/>
    </section>;
  }
}

const FilteredList = (props) => {
	return (
			<ul className='collection collapsible popout' data-collapsible='accordion'>
				{ props.filteredStreamersPayloads.map((payload, i) => {
		        return <UserCard key={i} payload={payload} /> })
				}
			</ul>
		)
}
const UserCard = (props) => {
    const {user, logo, bio, status, url, viewers, game, preview, followers, fps } = props.payload;
  const showLink = ()=>{
    if (url) {
      return (
        <a href={url} target='_blank' className='secondary-content'>
          <i className='material-icons'>web</i>
        </a>
      )
    }
  }
    return (
      <li className='collection-item avatar color-Bsd color-Tp'>
        <div className='collapsible-header'>
          <span className='title'>
            <img src={logo} alt={user} className='circle'/> {user}
            <p>
              <strong>Title: </strong>
              {status}
            </p>
          </span>
        </div>
        <div className='collapsible-body'>
          <p>
            <strong>Bio: </strong>
            {bio}<br/>
            <strong>Playing: </strong>
            {game}<br/>
            <strong>Current Views: </strong>
            {viewers}<br/>
            <strong>Followers: </strong>
            {followers}<br/>
            <strong>Stream Average FPS: </strong>
            {fps}
          </p>
          <img src={preview} className='responsive-img'/>
        </div>
        {showLink()}
      </li>
    )
}
const Menu = (props) => {
    return (
      <div className='fixed-action-btn horizontal click-to-toggle' style={{
        bottom: 45,
        right: 24
      }}>
        <a className='btn-floating btn-large red'>
          <i className='material-icons'>menu</i>
        </a>
        <ul>
          <li>
            <a className='btn-floating red modal-trigger' href='#editstreamers'>
              <i data-position='top' data-tooltip='Edit streamers list' className='material-icons tooltipped'>edit</i>
            </a>
          </li>
          <li>
            <a className='btn-floating yellow darken-1' onClick={props.onClickReset}>
              <i data-position='top' data-tooltip='Restore Default to Users' className='material-icons tooltipped'>settings_backup_restore</i>
            </a>
          </li>
        </ul>
      </div>
    );
}
const SearchBar = (props) => {
    return (
      <div className='row'>
          <div className='input-field col s12'>
            <i className='material-icons prefix color-Ts'>search</i>
            <input onChange={props.filterStreamers} className='color-Ts' id='search' type='text' name='search' placeholder='Search for streamers'/>
          </div>
      </div>
    );
}
const Header = () => {
    return <header className='page-header center-align'>
      <nav>
        <div className='nav-wrapper color-Bp'>
          <a className='brand-logo center color-Ts'>Twitch Status</a>
        </div>
      </nav>
    </header>
}
const Footer = () => {
    return <footer className='page-footer center-align color-Bp'>
      <FooterInfo/>
      <FooterCopyright/>
    </footer>
}
const FooterCopyright = () => {
    return <div className='footer-copyright'>
      <div className='container center-align'>
        Copyright &copy; &nbsp;
        <a className='color-Ts' href='http://rafase282.github.io/'>Rafael J. Rodriguez</a>
        &nbsp; 2016. All Rights Reserved
      </div>
    </div>
}
const FooterInfoButtons = () => {
    return (
      <div className='col l4 offset-l2 s12'>
        <h5 className='color-Ts'>Follow Me!</h5>
        <div className='col s6'>
          <ul>
            <li>
              <a href='https://github.com/Rafase282' target='_blank'>
                <span data-position='left' data-tooltip='GitHub' className='devicons devicons-github_badge color-Ts tooltipped'/>
              </a>
            </li>
            <li>
              <a href='https://www.linkedin.com/in/rafase282' target='_blank'>
                <i data-position='left' data-tooltip='LinkedIn' className='mdi mdi-linkedin-box small color-Ts tooltipped'/>
              </a>
            </li>
            <li>
              <a href='http://codepen.io/Rafase282' target='_blank'>
                <span data-position='left' data-tooltip='Codepen' className='devicons devicons-codepen color-Ts tooltipped'/>
              </a>
            </li>
            <li>
              <a href='https://www.youtube.com/c/rafaelrodriguez282' target='_blank'>
                <i data-position='left' data-tooltip='YouTube' className='mdi mdi-youtube-play small color-Ts tooltipped'></i>
              </a>
            </li>
          </ul>
        </div>
        <div className='col s6'>
          <ul>
            <li>
              <a href='https://medium.com/@Rafase282' target='_blank'><i data-position='left' data-tooltip='Medium' className='mdi mdi-medium small color-Ts tooltipped'/></a>
            </li>
            <li>
              <a href='https://twitter.com/Rafase282' target='_blank'><i data-position='left' data-tooltip='Twitter' className='mdi mdi-twitter small color-Ts tooltipped'/></a>
            </li>
            <li>
              <a href='http://www.freecodecamp.com/rafase282' target='_blank' style={{
                fontSize: '2em'
              }} className='color-Ts'>(<i data-position='left' data-tooltip='Free Code Camp' className='fa fa-fire fa-fw tooltipped'/>)</a>
            </li>
            <li>
              <a href='https://www.twitch.tv/rafase282' target='_blank'><i data-position='left' data-tooltip='Twitch' className='mdi mdi-twitch small color-Ts tooltipped'/></a>
            </li>
          </ul>
        </div>
      </div>
    )
}
const FooterInfo = () => {
    return (
      <div className='container'>
        <div className='row'>
          <div className='col l6 s12'>
            <h5 className='color-Ts'>About the app</h5>
            <p className='color-Ts-light'>The purpose of the app is to track your favorite streamers so you can see when they are online along with some basic statistics like the number of current views, followers, link to channels and preview of the current stream.
              <br/>
              If the user if offline or the account has been closed, it will let you know. You are able to add and remove accounts to keep track of.</p>

          </div>
          <FooterInfoButtons/>
        </div>
      </div>
    );
};

ReactDOM.render(
	<App />,
	document.querySelector('#content')
)
